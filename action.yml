name: 'Netlify Deploy with Comments'
description: 'Deploy to Netlify by Netlify-cli with Comments of Preview and Log URL'
branding:
  icon: check-square
  color: green
inputs:
  NETLIFY_AUTH_TOKEN:
    description: 'Auth token of Netlify'
    required: true
  NETLIFY_SITE_ID:
    description: 'Site ID of your website in Netlify'
    required: true
  deploy-dir:
    description: 'Build output folder path'
    required: false
    default: ./dist
  production:
    description: 'Deploy production mode'
    required: false
    default: 'false'
  node:
    description: 'Node version'
    required: false
    default: '14'
  build-command:
    description: 'Build command'
    required: false
    default: yarn build
  install-command:
    description: 'Install command'
    required: false
    default: yarn --check-files --frozen-lockfile --non-interactive
  cache-path:
    description: 'Paths for cache'
    required: false
    default: node_modules
  cache-strategy:
    description: 'yarn, npm, or pnpm'
    required: false
    default: yarn
  working-directory:
    description: 'Working Directory'
    required: false
    default: '.'
  
runs:
  using: composite
  steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: install pnpm
      if: inputs.cache-strategy == 'pnpm'
      uses: pnpm/action-setup@v2

    - name: generate info for cache
      id: info_for_cache
      run: |
        case ${{ inputs.cache-strategy }} in
          'npm' )
            LOCK_FILE_PATH="${{ inputs.working-directory }}/package-lock.json"
            CACHE_HASH=${{ hashFiles('**/package-lock.json') }}
            echo "Path of lock file is: $LOCK_FILE_PATH"
            echo "Generate hash from package-lock.json: $CACHE_HASH"
            echo "::set-output name=CACHE_HASH::$CACHE_HASH"
            echo "::set-output name=LOCK_FILE_PATH::$LOCK_FILE_PATH"
            ;;
          'yarn' )
            LOCK_FILE_PATH="${{ inputs.working-directory }}/yarn.lock"
            CACHE_HASH=${{ hashFiles('**/yarn.lock') }}
            echo "Path of lock file is: $LOCK_FILE_PATH"
            echo "Generate hash from yarn.lock: $CACHE_HASH"
            echo "::set-output name=CACHE_HASH::$CACHE_HASH"
            echo "::set-output name=LOCK_FILE_PATH::$LOCK_FILE_PATH"
            ;;
          'pnpm' )
            LOCK_FILE_PATH="${{ inputs.working-directory }}/pnpm-lock.yaml"
            echo "Path of lock file is: $LOCK_FILE_PATH"
            echo "::set-output name=LOCK_FILE_PATH::$LOCK_FILE_PATH"
            ;;
          * )
            echo "cache-strategy ${{ inputs.cache-strategy }} is not supported."
            exit 1
            ;;
        esac
      shell: bash

    - name: set up node.js v${{ inputs.node }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node }}
        cache: ${{ inputs.cache-strategy }}
        cache-dependency-path: ${{ steps.info_for_cache.outputs.LOCK_FILE_PATH }}

    - name: cache node_modules
      if: inputs.cache-strategy != 'pnpm'
      uses: actions/cache@v3
      with:
        path: ${{ inputs.cache-path }}
        key: node-v${{ inputs.node }}-${{ steps.info_for_cache.outputs.CACHE_HASH }}

    - name: install dependencies
      run: ${{ inputs.install-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: build
      run: ${{ inputs.build-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: install netlify-cli
      run: yarn global add netlify-cli
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: deploy to production mode
      if: inputs.production == 'true'
      env:
        NETLIFY_AUTH_TOKEN: ${{ inputs.NETLIFY_AUTH_TOKEN}}
        NETLIFY_SITE_ID: ${{ inputs.NETLIFY_SITE_ID}}
      run: netlify deploy --dir=${{ inputs.deploy-dir }} -p
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: deploy to preview mode
      if: inputs.production != 'true'
      id: deploy_preview
      env:
        NETLIFY_AUTH_TOKEN: ${{ inputs.NETLIFY_AUTH_TOKEN}}
        NETLIFY_SITE_ID: ${{ inputs.NETLIFY_SITE_ID}}
      run: |
        COMMAND="netlify deploy --dir=${{ inputs.deploy-dir }}"
        OUTPUT=$(sh -c "$COMMAND")
        NETLIFY_OUTPUT=$(echo "$OUTPUT")
        NETLIFY_PREVIEW_URL=$(echo "$OUTPUT" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_-]*(--)[a-zA-Z0-9./?=_-]*')
        NETLIFY_LOGS_URL=$(echo "$OUTPUT" | grep -Eo '(http|https)://app.netlify.com/[a-zA-Z0-9./?=_-]*')
        echo "::set-output name=NETLIFY_PREVIEW_URL::$NETLIFY_PREVIEW_URL"
        echo "::set-output name=NETLIFY_LOGS_URL::$NETLIFY_LOGS_URL"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: find the comment
      if: inputs.production != 'true'
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Netlify Preview Deployment Information

    - name: create or update comment
      if: inputs.production != 'true'
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Netlify Preview Deployment Information
          - Log URL: ${{ steps.deploy_preview.outputs.NETLIFY_LOGS_URL }}
          - Preview URL: ${{ steps.deploy_preview.outputs.NETLIFY_PREVIEW_URL }}
        edit-mode: replace
    